digraph states {
	// temperature measurement
	ShouldStartMeasurement -> ShouldStartMeasurement [label="Time has not passed"]
	ShouldStartMeasurement -> InitializeSmoothing [label="Enough time has passed"]
	InitializeSmoothing -> ShouldSmooth

	ShouldSmooth -> ShouldSmooth [label="Time has not passed"]
	ShouldSmooth -> SampleTemperature [label="Time has passed, not enough samples collected"]
	ShouldSmooth -> FillSharedState [label="Enough samples collected"]

	SampleTemperature -> PrepareNextSmoothStep
	PrepareNextSmoothStep -> ShouldSmooth
	FillSharedState -> InitWaitingForNextRound
	InitWaitingForNextRound -> ShouldStartMeasurement

	ShouldStartMeasurement [shape=diamond]
	ShouldSmooth [shape=diamond]

	// communicate with server
	ShouldStartCommunication -> ShouldStartCommunication [label="Time has not passed"]
	ShouldStartCommunication -> WakeUpEthernet [label="Enough time has passed"]

	WakeUpEthernet -> InitiateConnectionTemperature
	InitiateConnectionTemperature -> WasConnectionCompletedTemperature

	WasConnectionCompletedTemperature -> RecvSendPackets -> WasConnectionCompletedTemperature [style=dashed]
	WasConnectionCompletedTemperature -> PowerDownEthernet [label="Connection timeout, something went wrong"]
	WasConnectionCompletedTemperature -> WasConnectionCompletedTemperature [label="Data not send yet"]
	WasConnectionCompletedTemperature -> InitiateConnectionSchedule [label="Data was send"]

	InitiateConnectionSchedule -> WasConnectionCompletedSchedule

	WasConnectionCompletedSchedule -> RecvSendPackets -> WasConnectionCompletedSchedule [style=dashed]
	WasConnectionCompletedSchedule -> PowerDownEthernet [label="Connection timeout, something went wrong"]
	WasConnectionCompletedSchedule -> WasConnectionCompletedSchedule [label="Data not received yet"]
	WasConnectionCompletedSchedule -> FillSharedScheduleState [label="Data was received"]

	FillSharedScheduleState -> PowerDownEthernet
	PowerDownEthernet -> InitNextCommunicationRound -> ShouldStartCommunication


	ShouldStartCommunication [shape=diamond]
	WasConnectionCompletedTemperature [shape=diamond]
	WasConnectionCompletedSchedule [shape=diamond]

	// show screen
	ShouldScreenWakeUp -> WakeScreen [label="Any button was pressed to wake the screen"]
	ShouldScreenWakeUp -> ShouldScreenWakeUp [label="Screen remains sleeping"]

	WakeScreen -> DrawScreen

	DrawScreen -> WriteCurrentTime -> IsUpdatingTemperatureFirstLine

	IsUpdatingTemperatureFirstLine -> WriteSpacesOnFirstLine [label="Not updating temperature"]
	IsUpdatingTemperatureFirstLine -> WriteFireOnFirstLine [label="Updating temperature"]
	WriteSpacesOnFirstLine -> WriteCurrentTemperature
	WriteFireOnFirstLine -> WriteCurrentTemperature
	WriteCurrentTemperature -> WriteEndScheduleLine
	
	WriteEndScheduleLine -> IsUpdatingTemperatureSecondLine
	IsUpdatingTemperatureSecondLine -> WriteCurrentScheduleTimeAndTemperature [label="Not updating temperature"]
	IsUpdatingTemperatureSecondLine -> WriteNewScheduleTimeAndTemperature [label="Updating temperature"]
	WriteCurrentScheduleTimeAndTemperature -> ShouldRedraw
	WriteNewScheduleTimeAndTemperature -> ShouldRedraw

	ShouldRedraw -> DrawScreen [label="Time has passed"]
	ShouldRedraw -> ShouldRedraw [label="Time has not passed"]
	ShouldRedraw -> ShouldScreenWakeUp [label="No action for too long, lets sleep"]


	ShouldScreenWakeUp [shape=diamond]
	IsUpdatingTemperatureFirstLine [shape=diamond, style=dashed]
	IsUpdatingTemperatureSecondLine [shape=diamond, style=dashed]
	ShouldRedraw [shape=diamond]


	// schedule handler
	NotHeating -> CheckBaseSchedule
	CheckBaseSchedule -> NoHeatingCheckCustomSchedule [label="Schedule defines a temperature lower than the current"]
	CheckBaseSchedule -> HeatingCheckCustomSchedule [label="Schedule defines a temperature higher than the current"]

	NoHeatingCheckCustomSchedule -> NotHeating [label="CustomSchedule defines a temperature lower than the current"]
	NoHeatingCheckCustomSchedule -> NotHeating [label="CustomSchedule defines nothing for the current time"]
	NoHeatingCheckCustomSchedule -> Heating [label="CustomSchedule defines a temperature higher than the current"]
	HeatingCheckCustomSchedule -> NotHeating [label="CustomSchedule defines a temperature lower than the current"]
	HeatingCheckCustomSchedule -> Heating [label="CustomSchedule defines a temperature higher than the current"]
	HeatingCheckCustomSchedule -> Heating [label="CustomSchedule defines nothing for the current time"]

	Heating -> CheckBaseSchedule

	CheckBaseSchedule [shape=diamond]
	NoHeatingCheckCustomSchedule [shape=diamond, style=dashed]
	HeatingCheckCustomSchedule [shape=diamond, style=dashed]

	// button debouncer
	CheckPressedButtons -> StartDebounceTimer [label="One or more new buttons are pressed"]
	CheckPressedButtons -> CheckPressedButtons [label="No new buttons are pressed"]
	CheckPressedButtons -> SetButtonVariableLow [label="One or more buttons are unpressed"]

	StartDebounceTimer -> IsDebounceTimePassed

	IsDebounceTimePassed -> SetButtonVariableHigh [label="The button pressed is still high"]
	IsDebounceTimePassed -> IsDebounceTimePassed [label="Time has not passed"]
	IsDebounceTimePassed -> CheckPressedButtons [label="Button is low after time passed"]

	SetButtonVariableHigh -> CheckPressedButtons
	SetButtonVariableLow -> CheckPressedButtons
	
	CheckPressedButtons [shape=diamond]
	IsDebounceTimePassed [shape=diamond]
	
	// button pressed/held handler
	HasButtonCheckTimePassed -> HasButtonCheckTimePassed [label="Time has not passed"]
	HasButtonCheckTimePassed -> CheckNewButtonHigh [label="Time has passed"]

	CheckNewButtonHigh -> CheckButtonsHeldHighTimePassed [label="no new buttons high"]
	CheckNewButtonHigh -> NewButtonHigh [label="a new button is high"]

	CheckButtonsHeldHighTimePassed -> HasButtonCheckTimePassed [label="button held time not passed"]
	CheckButtonsHeldHighTimePassed -> FireActionEvent [label="button held time passed"]

	NewButtonHigh -> FireFirstActionEvent -> AddToButtonHeldCollection -> CheckButtonsHeldHighTimePassed
	FireActionEvent -> HasButtonCheckTimePassed


	HasButtonCheckTimePassed [shape=diamond]
	CheckNewButtonHigh [shape=diamond, style=dashed]
	CheckButtonsHeldHighTimePassed [shape=diamond, style=dashed]
}
